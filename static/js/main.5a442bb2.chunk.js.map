{"version":3,"sources":["Store/Store.js","Store/snippets/demo.js","Modules/parsers/CSS.js","Modules/syntax.js","Components/Editor/Editor.js","App/App.js","index.js"],"names":["language","code","fields","default","expected","caseSensitive","watch","el","prop","CSS","lines","output","forEach","line","lineoutput","selectorlist","split","length","set","selectors","group","selector","parts","raw","inner","segment","type","match","startsWith","ps","findIndex","item","ruleparts","definition","space","rule","val","comments","comment","endsWith","includes","push","parseCode","snippet","locked","parsers","parseCSS","data","parse","inputvals","field","ref","input","join","Editor","props","componentDidMount","document","querySelectorAll","size","value","isMobileDevice","handleInput","e","target","name","state","complete","toLowerCase","querySelector","style","onComplete","window","orientation","navigator","userAgent","indexOf","this","setState","className","dangerouslySetInnerHTML","__html","onInput","React","Component","App","handleComplete","status","darkEditor","snippets","index","completed","Object","values","filter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a442bb2.chunk.js","sourcesContent":["import demo from './snippets/demo';\r\n\r\n\r\nexport default [\r\n  demo\r\n];","// the code to be displayed in the editor\r\nconst code = `/* replace 'selector' with '.editor' */\r\n!!!selector!!! {\r\n  display: block;\r\n  background: #000000;\r\n}\r\n\r\n#hero > .card {\r\n  box-sizing: border-box;\r\n}\r\n\r\na:hover, button:hover {\r\n  color: #FF0000;\r\n}\r\n\r\nhtml, body, input[type=text] {\r\n  display: flex;\r\n  background: !!!background!!!; /* change to '#29CA73' */\r\n}`;\r\n\r\n\r\n// all other options\r\nexport default {\r\n  language: 'CSS',\r\n  code,\r\n\r\n  fields: {\r\n    'selector': {\r\n      default: 'selector',\r\n      expected: '.editor',\r\n      caseSensitive: true\r\n    },\r\n\r\n    'background': {\r\n      default: '#F75F45',\r\n      expected: '#29CA73',\r\n      watch: {\r\n        el: 'main',\r\n        prop: 'background'\r\n      },\r\n    }\r\n  }\r\n};","export default function CSS(lines) {\r\n  let output = [];\r\n  lines.forEach(line => {\r\n\r\n    // to hold the output for the current line\r\n    let lineoutput = '';\r\n\r\n    // highlight tag selectors\r\n    const selectorlist = line.split(/\\s{|{/);\r\n    if (selectorlist.length > 1) {\r\n      selectorlist.forEach(set => {\r\n        if (set) {\r\n\r\n          // multiple selectors in one rule?\r\n          const selectors = set.split(/,\\s|,/);\r\n          selectors.forEach(group => {\r\n\r\n            // direct child, child, or adjacent selectors?\r\n            const portions = group.split(/(\\s>\\s|>)|(\\s\\+\\s|\\+)|(\\s~\\s|~)|(,\\s|,)|(\\s)/);\r\n            portions.forEach(selector => {\r\n              if (!selector) return false;\r\n\r\n              // split into tags and pseudo-elements/state-selectors\r\n              const parts = selector.split(/::|:/);\r\n              const raw = parts[0];\r\n              if (raw.length > 0) {\r\n\r\n                // check for attribute selectors\r\n                let inner = raw.split(/\\[/);\r\n                if (inner.length > 1) inner[1] = '[' + inner[1];\r\n\r\n                inner.forEach(segment => {\r\n                  if (!segment) return false;\r\n\r\n                  // determine selector type\r\n                  let type = 'tag';\r\n                  if (segment.match(/(\\s>\\s|>)|(\\s\\+\\s|\\+)|(\\s~\\s|~)|(,\\s|,)/))\r\n                    type = 'spec';\r\n                  if (segment.startsWith('#'))\r\n                    type = 'id';\r\n                  if (segment.startsWith('.') || segment.startsWith('['))\r\n                    type = 'selector';\r\n\r\n                  lineoutput += `<span class=\"${type}\">${segment}</span>`;\r\n\r\n                });\r\n              }\r\n\r\n              // pseudo-selectors\r\n              if (parts.length > 1) {\r\n                const ps = selector.split(parts[0])[1].split(parts[1])[0];\r\n                lineoutput += `<span class=\"pseudo\">${ps + parts[1]}</span>`;\r\n              }\r\n\r\n            });\r\n\r\n            // add commas\r\n            if (selectors.findIndex(item => item === group) !== selectors.length - 1) {\r\n              lineoutput += ', ';\r\n            }\r\n\r\n          });\r\n\r\n        }\r\n\r\n        else {\r\n          lineoutput += ' {';\r\n        }\r\n\r\n      });\r\n\r\n    }\r\n\r\n    // highlight properties & values\r\n    const ruleparts = line.split(/;/);\r\n    if (ruleparts.length > 1) {\r\n      const definition = ruleparts[0].split(/\\t|\\s\\s/)[1];\r\n      const space = ruleparts[0].split(definition)[0];\r\n\r\n      const rule = definition.split(/:\\s|:/);\r\n      const prop = rule[0];\r\n      const val = rule[1];\r\n      lineoutput += space;\r\n      lineoutput += `<span class=\"prop\">${prop}</span>: `;\r\n\r\n      // value highlighting\r\n      lineoutput += `<span class=\"val\">${val}</span>`;\r\n      lineoutput += `;`;\r\n\r\n      // space between semi-colon and comma\r\n      if (ruleparts[1])\r\n        lineoutput += ' ';\r\n\r\n    }\r\n\r\n    // highlight comments\r\n    const comments = line.split(/\\/\\*/);\r\n    if (comments.length > 1) {\r\n      comments.forEach(comment => {\r\n        if (comment.endsWith('*/')) {\r\n          lineoutput += `<span class=\"comment\">/*${comment.split(/\\*\\//)[0]}*/</span>`;\r\n        }\r\n      });\r\n    }\r\n\r\n    // closing rules\r\n    if (line.includes('}')) lineoutput += '}';\r\n\r\n    // send it out\r\n    output.push(lineoutput);\r\n\r\n  });\r\n\r\n  return output;\r\n\r\n}\r\n","// import the parsers\r\nimport parseCSS from './parsers/CSS';\r\n\r\nexport function parseCode(snippet, locked=false) {\r\n\r\n  // index all the parsers available\r\n  const parsers = {\r\n    'CSS': parseCSS\r\n  };\r\n\r\n  // hold all the output\r\n  let output = ''; \r\n\r\n  const data = snippet.code.split(/\\n/);\r\n  const parse = parsers[snippet.language];\r\n\r\n  // send to the appropriate parser\r\n  let lines = parse(data); \r\n\r\n  lines.forEach(line => {\r\n\r\n    // hold each line's output\r\n    let lineoutput = line; \r\n\r\n    // find input fields in code (for controlled editing)\r\n    // and create an input element for each\r\n    const inputvals = lineoutput.split(/!!!(.+)!!!/);\r\n    if (inputvals.length > 1) {\r\n      const field = inputvals[1];\r\n      const ref = snippet.fields[field];\r\n      const input = `<input name=${field} type=\"text\" value=\"${ref.default}\"/>`;\r\n      \r\n      lineoutput = inputvals[0] + (locked ? ref.expected : input) + inputvals[2];\r\n    }\r\n\r\n    // replace tab characters\r\n    if (lineoutput.length === 0) lineoutput = line ? line : '<pre></pre>';\r\n    lineoutput = lineoutput.split(/\\s\\s|\\t/).join('<pre>\\t</pre>');\r\n\r\n    // wrap the line in a div & add it to the main output stream\r\n    lineoutput = `<div class=\"line\">${lineoutput}</div>`;\r\n    output += lineoutput;\r\n\r\n  });\r\n\r\n  // fallback if nothing works\r\n  if (output.length === 0) output = snippet.code;\r\n  return output;\r\n\r\n}","import React from 'react';\r\nimport { parseCode } from '../../Modules/syntax';\r\nimport './Editor.sass';\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      ...props.snippet,\r\n      code: parseCode(props.snippet, props.locked)\r\n    };\r\n  }\r\n\r\n  isMobileDevice() {\r\n    return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.querySelectorAll('input').forEach(input => {\r\n      input.size = input.value.length;\r\n      if (!this.isMobileDevice()) input.size -= 1;\r\n    })\r\n  }\r\n\r\n  handleInput = e => {\r\n    const input = e.target;\r\n    input.size = input.value.length > 1 ? input.value.length : 1;\r\n    if (!this.isMobileDevice()) input.size -= 1;\r\n\r\n    // call parent with complete status\r\n    const name = input.name;\r\n    const field = this.state.fields[name];\r\n    let complete = field.caseSensitive ? input.value === field.expected : input.value.toLowerCase() === field.expected.toLowerCase();\r\n\r\n    if (field.watch) {\r\n      document.querySelector(field.watch.el).style = `${field.watch.prop}: ${input.value || field.default}`\r\n    }\r\n\r\n    this.props.onComplete(name, complete);\r\n\r\n  }\r\n\r\n  componentDidUpdate(props) {\r\n    if (props.locked !== this.props.locked) {\r\n      this.setState({\r\n        code: parseCode(this.props.snippet, this.props.locked)\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"editor\"\r\n        dangerouslySetInnerHTML={{__html: this.state.code}}\r\n        onInput={this.handleInput}>  \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react';\r\nimport snippets from '../Store/Store';\r\nimport Editor from '../Components/Editor/Editor';\r\n\r\nimport './App.sass';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snippets: snippets,\r\n      index: 0,\r\n      fields: {},\r\n    };\r\n  }\r\n\r\n  handleComplete = (field, status) => {\r\n    const { fields } = this.state;\r\n    fields[field] = status;\r\n    this.setState({\r\n      fields: fields\r\n    }, () => {\r\n      \r\n      // hook on the completion event of different fields        \r\n      if (field === 'selector') {\r\n        this.setState({\r\n          darkEditor: status\r\n        })\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const snippet = this.state.snippets[this.state.index];\r\n    const { fields } = this.state;\r\n    const listed = Object.values(fields).filter(value => value === true);\r\n    const completed = listed.length === Object.values(snippet.fields).length;\r\n    return (\r\n      <>\r\n        <div className={`window animated ${completed ? 'tada' : ''}`}>\r\n          <div className=\"frame\">\r\n            <span className=\"btn btn-close\"></span>\r\n            <span className=\"btn btn-minimize\"></span>\r\n            <span className=\"btn btn-fullscreen\"></span>\r\n          </div>\r\n          <div className={`content ${this.state.darkEditor ? 'dark' : ''}`}>\r\n            <Editor\r\n              snippet={snippet}\r\n              onComplete={this.handleComplete}\r\n              locked={completed}/>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}